import { useAuth } from '@/hooks/use-auth';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { useQuery } from '@tanstack/react-query';
import { Link, useParams } from 'wouter';
import { ArrowLeft, Download, FileText, User, TestTube, Calendar, Stethoscope } from 'lucide-react';
import jsPDF from 'jspdf';

const testNames = {
  cbc: 'Complete Blood Count (CBC)',
  blood_sugar: 'Blood Sugar Test',
  lipid_profile: 'Lipid Profile',
  liver_function: 'Liver Function Test',
  xray_chest: 'X-Ray Chest',
  urine_test: 'Urine Analysis',
};

export default function LabReport() {
  const { user } = useAuth();
  const { toast } = useToast();
  const params = useParams();
  const labTestId = params.labTestId;

  // Fetch lab test details
  const { data: labTest, isLoading } = useQuery<{
    id: string;
    testType: string;
    results: string;
    doctorNotes?: string;
    totalCost: string;
    createdAt: string;
    patient: {
      id: string;
      patientId: string;
      name: string;
      age: number;
      gender: string;
      contact?: string;
    };
  }>({
    queryKey: ['/api/lab-tests', labTestId],
    enabled: !!labTestId,
  });

  const generatePDF = () => {
    if (!labTest) return;

    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    
    try {
      // Header
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('HOSPITAL MANAGEMENT SYSTEM', pageWidth / 2, 20, { align: 'center' });
      
      doc.setFontSize(16);
      doc.text('Laboratory Test Report', pageWidth / 2, 30, { align: 'center' });
      
      // Patient Information
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Patient Information:', 20, 50);
      
      doc.setFont('helvetica', 'normal');
      doc.text(`Patient ID: ${labTest.patient.patientId}`, 20, 60);
      doc.text(`Name: ${labTest.patient.name}`, 20, 70);
      doc.text(`Age: ${labTest.patient.age} years`, 20, 80);
      doc.text(`Gender: ${labTest.patient.gender}`, 20, 90);
      if (labTest.patient.contact) {
        doc.text(`Contact: ${labTest.patient.contact}`, 20, 100);
      }
      
      // Test Information
      doc.setFont('helvetica', 'bold');
      doc.text('Test Information:', 20, 120);
      
      doc.setFont('helvetica', 'normal');
      doc.text(`Test Date: ${new Date(labTest.createdAt).toLocaleDateString()}`, 20, 130);
      doc.text(`Tests Performed: ${labTest.testType}`, 20, 140);
      doc.text(`Total Cost: ₹${labTest.totalCost}`, 20, 150);
      
      // Results
      let yPos = 170;
      doc.setFont('helvetica', 'bold');
      doc.text('Test Results:', 20, yPos);
      yPos += 10;
      
      doc.setFont('helvetica', 'normal');
      
      try {
        const results = JSON.parse(labTest.results);
        const testTypes = labTest.testType.split(', ');
        
        testTypes.forEach((testId: string) => {
          const cleanTestId = testId.trim();
          const testName = testNames[cleanTestId as keyof typeof testNames] || cleanTestId;
          const testResults = results[cleanTestId];
          
          if (testResults) {
            yPos += 10;
            doc.setFont('helvetica', 'bold');
            doc.text(`${testName}:`, 20, yPos);
            yPos += 8;
            
            doc.setFont('helvetica', 'normal');
            Object.entries(testResults).forEach(([key, value]) => {
              if (value) {
                doc.text(`  ${key}: ${value}`, 25, yPos);
                yPos += 6;
              }
            });
          }
        });
      } catch (e) {
        doc.text('Unable to parse test results', 20, yPos);
      }
      
      // Doctor's Notes
      if (labTest.doctorNotes) {
        yPos += 20;
        doc.setFont('helvetica', 'bold');
        doc.text('Doctor\'s Notes:', 20, yPos);
        yPos += 10;
        
        doc.setFont('helvetica', 'normal');
        const notes = doc.splitTextToSize(labTest.doctorNotes, pageWidth - 40);
        doc.text(notes, 20, yPos);
      }
      
      // Footer
      yPos = doc.internal.pageSize.getHeight() - 30;
      doc.setFont('helvetica', 'italic');
      doc.setFontSize(10);
      doc.text(`Generated by: ${user?.name}`, 20, yPos);
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, yPos + 10);
      
      // Save
      doc.save(`Lab-Report-${labTest.patient.patientId}.pdf`);
      
      toast({
        title: 'Success',
        description: 'Lab report downloaded successfully',
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to generate PDF report',
        variant: 'destructive',
      });
    }
  };

  if (!labTestId) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p className="text-red-600 mb-4">Lab test ID is required</p>
          <Link href="/lab/patient-registration">
            <Button>Start New Test</Button>
          </Link>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">Loading lab test report...</div>
      </div>
    );
  }

  if (!labTest) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p className="text-red-600 mb-4">Lab test not found</p>
          <Link href="/lab/patient-registration">
            <Button>Start New Test</Button>
          </Link>
        </div>
      </div>
    );
  }

  let parsedResults: any = {};
  try {
    parsedResults = JSON.parse(labTest.results);
  } catch (e) {
    console.error('Failed to parse results:', e);
  }

  const testTypes = labTest.testType.split(', ');

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header Navigation */}
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/dashboard">
                <Button variant="ghost" size="sm" className="mr-4">
                  <ArrowLeft className="h-4 w-4" />
                </Button>
              </Link>
              <FileText className="text-medical-blue text-xl mr-3" />
              <span className="text-xl font-bold text-gray-900">Lab Test Report</span>
            </div>
            <div className="flex items-center space-x-4">
              <Button onClick={generatePDF} className="bg-medical-blue hover:bg-blue-700">
                <Download className="mr-2 h-4 w-4" />
                Download PDF
              </Button>
              <span className="text-sm text-gray-600">{user?.name}</span>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Progress Steps */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="flex items-center text-green-600">
                <div className="flex items-center justify-center w-8 h-8 bg-green-600 text-white rounded-full text-sm font-bold">
                  ✓
                </div>
                <span className="ml-2 text-sm font-medium">Patient Registration</span>
              </div>
              <div className="flex items-center ml-4 text-green-600">
                <div className="flex items-center justify-center w-8 h-8 bg-green-600 text-white rounded-full text-sm font-bold">
                  ✓
                </div>
                <span className="ml-2 text-sm font-medium">Test Selection</span>
              </div>
              <div className="flex items-center ml-4 text-green-600">
                <div className="flex items-center justify-center w-8 h-8 bg-green-600 text-white rounded-full text-sm font-bold">
                  ✓
                </div>
                <span className="ml-2 text-sm font-medium">Enter Results</span>
              </div>
              <div className="flex items-center ml-4 text-medical-blue">
                <div className="flex items-center justify-center w-8 h-8 bg-medical-blue text-white rounded-full text-sm font-bold">
                  4
                </div>
                <span className="ml-2 text-sm font-medium">Report</span>
              </div>
            </div>
          </div>
        </div>

        {/* Report Header */}
        <Card className="mb-6">
          <CardHeader className="text-center bg-medical-blue text-white">
            <CardTitle className="text-2xl">LABORATORY TEST REPORT</CardTitle>
            <p className="text-blue-100">Hospital Management System</p>
          </CardHeader>
        </Card>

        {/* Patient Information */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center">
              <User className="mr-2 h-5 w-5" />
              Patient Information
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div>
                <p className="text-sm font-medium text-gray-500">Patient ID</p>
                <p className="text-lg font-semibold">{labTest.patient.patientId}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500">Name</p>
                <p className="text-lg font-semibold">{labTest.patient.name}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500">Age & Gender</p>
                <p className="text-lg font-semibold">{labTest.patient.age} years, {labTest.patient.gender}</p>
              </div>
              {labTest.patient.contact && (
                <div>
                  <p className="text-sm font-medium text-gray-500">Contact</p>
                  <p className="text-lg font-semibold">{labTest.patient.contact}</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Test Information */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Calendar className="mr-2 h-5 w-5" />
              Test Information
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <p className="text-sm font-medium text-gray-500">Test Date</p>
                <p className="text-lg font-semibold">{new Date(labTest.createdAt).toLocaleDateString()}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500">Tests Performed</p>
                <p className="text-lg font-semibold">{labTest.testType}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500">Total Cost</p>
                <p className="text-lg font-semibold text-medical-blue">₹{labTest.totalCost}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Test Results */}
        <div className="space-y-4">
          {testTypes.map((testId: string) => {
            const cleanTestId = testId.trim();
            const testName = testNames[cleanTestId as keyof typeof testNames] || cleanTestId;
            const testResults = parsedResults[cleanTestId];
            
            if (!testResults) return null;
            
            return (
              <Card key={cleanTestId}>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <TestTube className="mr-2 h-5 w-5" />
                    {testName}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {Object.entries(testResults).map(([key, value]) => {
                      if (!value) return null;
                      return (
                        <div key={key}>
                          <p className="text-sm font-medium text-gray-500 capitalize">{key.replace(/([A-Z])/g, ' $1')}</p>
                          <p className="text-lg font-semibold">{String(value)}</p>
                        </div>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Doctor's Notes */}
        {labTest.doctorNotes && (
          <Card className="mt-6">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Stethoscope className="mr-2 h-5 w-5" />
                Doctor's Notes
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-700 whitespace-pre-wrap">{labTest.doctorNotes}</p>
            </CardContent>
          </Card>
        )}

        {/* Actions */}
        <div className="mt-8 flex justify-center space-x-4">
          <Button onClick={generatePDF} size="lg" className="bg-medical-blue hover:bg-blue-700">
            <Download className="mr-2 h-4 w-4" />
            Download PDF Report
          </Button>
          <Link href="/lab/patient-registration">
            <Button variant="outline" size="lg">
              Start New Test
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
}